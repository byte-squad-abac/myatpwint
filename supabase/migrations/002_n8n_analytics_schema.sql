-- N8N Analytics and Marketing Schema
-- Supports automated workflows for marketing and revenue analytics

-- Table for storing book recommendations generated by N8N workflows
CREATE TABLE book_recommendations (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  book_id UUID REFERENCES books(id) ON DELETE CASCADE,
  category TEXT,
  author TEXT,
  tags TEXT[],
  boost_score DECIMAL DEFAULT 1.0,
  marketing_campaign_active BOOLEAN DEFAULT FALSE,
  campaign_start_date TIMESTAMPTZ,
  generated_content JSONB, -- Stores AI-generated marketing content
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table for revenue analytics processed by N8N
CREATE TABLE revenue_analytics (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  payment_id TEXT UNIQUE,
  book_id UUID REFERENCES books(id),
  user_id UUID REFERENCES auth.users(id),
  gross_amount DECIMAL,
  platform_fee DECIMAL,
  stripe_fee DECIMAL,
  publisher_royalty DECIMAL,
  author_royalty DECIMAL,
  net_revenue DECIMAL,
  currency TEXT DEFAULT 'mmk',
  processed_at TIMESTAMPTZ,
  status TEXT DEFAULT 'calculated',
  metadata JSONB, -- Additional payment metadata
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table for daily analytics summaries
CREATE TABLE IF NOT EXISTS daily_analytics (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  report_date DATE UNIQUE,
  total_sales DECIMAL DEFAULT 0,
  total_transactions INTEGER DEFAULT 0,
  platform_revenue DECIMAL DEFAULT 0,
  stripe_costs DECIMAL DEFAULT 0,
  publisher_payouts DECIMAL DEFAULT 0,
  author_payouts DECIMAL DEFAULT 0,
  net_profit DECIMAL DEFAULT 0,
  top_selling_books JSONB, -- Array of book IDs and sales counts
  currency TEXT DEFAULT 'mmk',
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table for marketing campaigns generated by N8N
CREATE TABLE IF NOT EXISTS marketing_campaigns (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  book_id UUID REFERENCES books(id) ON DELETE CASCADE,
  campaign_type TEXT NOT NULL, -- 'book_launch', 'promotion', 'seasonal'
  ai_generated_content JSONB NOT NULL, -- Social media posts, email content
  status TEXT DEFAULT 'active', -- 'active', 'paused', 'completed'
  platforms TEXT[], -- ['facebook', 'twitter', 'email', 'instagram']
  target_audience JSONB, -- Audience segmentation data
  performance_metrics JSONB, -- Click rates, engagement, conversions
  scheduled_posts JSONB, -- Scheduled social media posts
  created_by TEXT DEFAULT 'n8n_automation',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table for tracking N8N workflow executions
CREATE TABLE IF NOT EXISTS n8n_workflow_logs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  workflow_name TEXT NOT NULL,
  workflow_id TEXT,
  execution_id TEXT,
  trigger_data JSONB,
  status TEXT DEFAULT 'running', -- 'running', 'success', 'error'
  execution_time_ms INTEGER,
  error_message TEXT,
  output_data JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table for email marketing subscriber data
CREATE TABLE IF NOT EXISTS email_subscribers (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  name TEXT,
  subscribed BOOLEAN DEFAULT TRUE,
  preferences JSONB, -- Genre preferences, frequency, etc.
  source TEXT DEFAULT 'website', -- 'website', 'book_purchase', 'social_media'
  tags TEXT[], -- Segmentation tags
  last_engagement TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_revenue_analytics_book_id ON revenue_analytics(book_id);
CREATE INDEX IF NOT EXISTS idx_revenue_analytics_processed_at ON revenue_analytics(processed_at);
CREATE INDEX IF NOT EXISTS idx_revenue_analytics_payment_id ON revenue_analytics(payment_id);

CREATE INDEX IF NOT EXISTS idx_book_recommendations_book_id ON book_recommendations(book_id);
CREATE INDEX IF NOT EXISTS idx_book_recommendations_campaign_active ON book_recommendations(marketing_campaign_active);

CREATE INDEX IF NOT EXISTS idx_marketing_campaigns_book_id ON marketing_campaigns(book_id);
CREATE INDEX IF NOT EXISTS idx_marketing_campaigns_status ON marketing_campaigns(status);
CREATE INDEX IF NOT EXISTS idx_marketing_campaigns_created_at ON marketing_campaigns(created_at);

CREATE INDEX IF NOT EXISTS idx_daily_analytics_report_date ON daily_analytics(report_date);

CREATE INDEX IF NOT EXISTS idx_n8n_workflow_logs_workflow_name ON n8n_workflow_logs(workflow_name);
CREATE INDEX IF NOT EXISTS idx_n8n_workflow_logs_status ON n8n_workflow_logs(status);
CREATE INDEX IF NOT EXISTS idx_n8n_workflow_logs_created_at ON n8n_workflow_logs(created_at);

CREATE INDEX IF NOT EXISTS idx_email_subscribers_email ON email_subscribers(email);
CREATE INDEX IF NOT EXISTS idx_email_subscribers_subscribed ON email_subscribers(subscribed);

-- Function to update daily analytics incrementally
CREATE OR REPLACE FUNCTION update_daily_analytics(
  target_date DATE,
  sales_amount DECIMAL,
  transaction_count INTEGER DEFAULT 1,
  platform_fee DECIMAL DEFAULT 0,
  stripe_fee DECIMAL DEFAULT 0,
  publisher_royalty DECIMAL DEFAULT 0,
  author_royalty DECIMAL DEFAULT 0
) RETURNS VOID AS $$
BEGIN
  INSERT INTO daily_analytics (
    report_date,
    total_sales,
    total_transactions,
    platform_revenue,
    stripe_costs,
    publisher_payouts,
    author_payouts,
    net_profit
  ) VALUES (
    target_date,
    sales_amount,
    transaction_count,
    platform_fee,
    stripe_fee,
    publisher_royalty,
    author_royalty,
    platform_fee - stripe_fee
  )
  ON CONFLICT (report_date) DO UPDATE SET
    total_sales = daily_analytics.total_sales + EXCLUDED.total_sales,
    total_transactions = daily_analytics.total_transactions + EXCLUDED.total_transactions,
    platform_revenue = daily_analytics.platform_revenue + EXCLUDED.platform_revenue,
    stripe_costs = daily_analytics.stripe_costs + EXCLUDED.stripe_costs,
    publisher_payouts = daily_analytics.publisher_payouts + EXCLUDED.publisher_payouts,
    author_payouts = daily_analytics.author_payouts + EXCLUDED.author_payouts,
    net_profit = daily_analytics.net_profit + (EXCLUDED.platform_revenue - EXCLUDED.stripe_costs),
    updated_at = NOW();
END;
$$ LANGUAGE plpgsql;

-- Function to get revenue statistics
CREATE OR REPLACE FUNCTION get_revenue_stats(
  start_date DATE DEFAULT CURRENT_DATE - INTERVAL '30 days',
  end_date DATE DEFAULT CURRENT_DATE
) RETURNS JSONB AS $$
DECLARE
  result JSONB;
BEGIN
  SELECT jsonb_build_object(
    'total_revenue', COALESCE(SUM(total_sales), 0),
    'total_transactions', COALESCE(SUM(total_transactions), 0),
    'average_order_value', CASE 
      WHEN SUM(total_transactions) > 0 
      THEN SUM(total_sales) / SUM(total_transactions)
      ELSE 0 
    END,
    'platform_revenue', COALESCE(SUM(platform_revenue), 0),
    'total_costs', COALESCE(SUM(stripe_costs), 0),
    'net_profit', COALESCE(SUM(net_profit), 0),
    'date_range', jsonb_build_object(
      'start_date', start_date,
      'end_date', end_date
    )
  ) INTO result
  FROM daily_analytics
  WHERE report_date BETWEEN start_date AND end_date;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Grant permissions
GRANT ALL ON TABLE book_recommendations TO anon, authenticated, service_role;
GRANT ALL ON TABLE revenue_analytics TO anon, authenticated, service_role;
GRANT ALL ON TABLE daily_analytics TO anon, authenticated, service_role;
GRANT ALL ON TABLE marketing_campaigns TO anon, authenticated, service_role;
GRANT ALL ON TABLE n8n_workflow_logs TO anon, authenticated, service_role;
GRANT ALL ON TABLE email_subscribers TO anon, authenticated, service_role;

GRANT EXECUTE ON FUNCTION update_daily_analytics TO anon, authenticated, service_role;
GRANT EXECUTE ON FUNCTION get_revenue_stats TO anon, authenticated, service_role;